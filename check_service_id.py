#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ Railway —Å–µ—Ä–≤–∏—Å–∞ –ø–æ ID
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ c015bdb5-710d-46b8-ad86-c566b99e7560
"""
import subprocess
import json

def check_service(service_id):
    print("="*80)
    print(f"–ü–†–û–í–ï–†–ö–ê RAILWAY –°–ï–†–í–ò–°–ê: {service_id}")
    print("="*80)

    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
    known_services = {
        "ffe65f79-4dc5-4757-b772-5a99c7ea624f": {
            "name": "RSS FTS",
            "mode": "fts-continuous",
            "description": "Full-Text Search –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è"
        },
        "c015bdb5-710d-46b8-ad86-c566b99e7560": {
            "name": "Unknown - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
            "mode": "unknown",
            "description": "–°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω"
        }
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
    if service_id in known_services:
        info = known_services[service_id]
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
        print(f"   SERVICE_MODE: {info['mode']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
    else:
        print(f"\n‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Railway CLI
    print(f"\nüîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Railway CLI...")

    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands = [
            f"railway vars --service-id {service_id}",
            f"railway logs --service-id {service_id} --limit 10",
            "railway service",
        ]

        for cmd in commands:
            print(f"\n   –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
            try:
                result = subprocess.run(
                    cmd,
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=20
                )

                if result.returncode == 0 and result.stdout:
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ:")
                    print(result.stdout[:500])
                    break
                elif result.stderr:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr[:200]}")
            except subprocess.TimeoutExpired:
                print(f"   ‚è±Ô∏è  Timeout")
                continue
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                continue

    except Exception as e:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")

    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–¥–µ
    print(f"\nüîé –ü–æ–∏—Å–∫ –≤ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ...")

    try:
        result = subprocess.run(
            f'grep -r "{service_id}" . --include="*.py" --include="*.md" --include="*.txt" 2>/dev/null',
            shell=True,
            capture_output=True,
            text=True,
            timeout=10
        )

        if result.stdout:
            matches = result.stdout.split('\n')[:10]
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(matches)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:")
            for match in matches:
                if match.strip():
                    print(f"   {match[:120]}")
        else:
            print(f"   ‚ö†Ô∏è  –£–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–¥–µ")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ update_railway_vars.py
    print(f"\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ update_railway_vars.py...")
    try:
        with open('update_railway_vars.py', 'r', encoding='utf-8') as f:
            content = f.read()
            if service_id in content:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ update_railway_vars.py")
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if service_id in line:
                        context = '\n'.join(lines[max(0, i-3):min(len(lines), i+4)])
                        print(f"\n   –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –≤ update_railway_vars.py")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ check_railway_*.py —Ñ–∞–π–ª–∞—Ö
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ check_railway_*.py...")
    import glob
    for file in glob.glob('check_railway*.py'):
        try:
            with open(file, 'r', encoding='utf-8') as f:
                if service_id in f.read():
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ {file}")
        except:
            pass

    # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    print(f"\n{'='*80}")
    print("–ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print(f"{'='*80}")

    print(f"\nüÜî Service ID: {service_id}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if service_id == "c015bdb5-710d-46b8-ad86-c566b99e7560":
        print(f"\n‚ùì –°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        print(f"\nüìå –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
        print(f"   1. –°—Ç–∞—Ä—ã–π/—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–µ—Ä–≤–∏—Å (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
        print(f"   2. –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å")
        print(f"   3. –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
        print(f"   4. –°–µ—Ä–≤–∏—Å —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º")
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ Railway Dashboard")
        print(f"   railway.app ‚Üí Project ‚Üí Services")

if __name__ == "__main__":
    service_id = "c015bdb5-710d-46b8-ad86-c566b99e7560"
    check_service(service_id)

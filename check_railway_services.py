#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway —Å–µ—Ä–≤–∏—Å–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SERVICE_MODE –∏ RAILWAY_SERVICE_ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
"""
import os
import subprocess
import json

def run_command(cmd):
    """Execute shell command and return output"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
        return result.stdout.strip()
    except Exception as e:
        return f"Error: {e}"

def get_services():
    """Get list of Railway services"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º railway CLI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    output = run_command("railway service list --json 2>/dev/null || railway service 2>&1")

    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –≤—ã–≤–æ–¥–∞
    known_services = [
        "WORK",
        "OpenAIEmbending",
        "RSS POLL",
        "Bot",
        "rssnews",
        "CHUNK",
        "RSS FTS"
    ]

    return known_services

def get_service_vars(service_name):
    """Get environment variables for a specific service"""
    cmd = f'railway vars --service "{service_name}" --json 2>/dev/null'
    output = run_command(cmd)

    if output.startswith("Error") or not output:
        # Fallback to text output
        cmd = f'railway vars --service "{service_name}" 2>/dev/null'
        output = run_command(cmd)

        # Parse text output
        vars_dict = {}
        for line in output.split('\n'):
            if '=' in line:
                key, value = line.split('=', 1)
                vars_dict[key.strip()] = value.strip()
        return vars_dict

    try:
        return json.loads(output)
    except:
        return {}

def main():
    print("=" * 80)
    print("–ü–†–û–í–ï–†–ö–ê RAILWAY –°–ï–†–í–ò–°–û–í")
    print("=" * 80)

    services = get_services()

    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(services)}\n")

    # –ú–∞–ø–ø–∏–Ω–≥ –æ–∂–∏–¥–∞–µ–º—ã—Ö SERVICE_MODE –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    expected_modes = {
        "WORK": "work-continuous",
        "OpenAIEmbending": "embedding",
        "RSS POLL": "poll",
        "Bot": "bot",
        "rssnews": "openai-migration",  # –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
        "CHUNK": "chunk-continuous",
        "RSS FTS": "fts-continuous"  # –ù–û–í–´–ô FTS —Å–µ—Ä–≤–∏—Å
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    results = []

    for service in services:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Ä–≤–∏—Å: {service}")
        print("-" * 80)

        vars_dict = get_service_vars(service)

        service_mode = vars_dict.get('SERVICE_MODE', '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')
        service_id = vars_dict.get('RAILWAY_SERVICE_ID', vars_dict.get('SERVICE_ID', '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'))

        expected_mode = expected_modes.get(service, '‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        mode_ok = service_mode == expected_mode
        mode_status = "‚úÖ" if mode_ok else "‚ùå"

        print(f"  SERVICE_MODE:        {mode_status} {service_mode}")
        print(f"  –û–∂–∏–¥–∞–µ—Ç—Å—è:           {expected_mode}")
        print(f"  RAILWAY_SERVICE_ID:  {service_id}")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è FTS
        if service == "RSS FTS":
            expected_fts_id = "ffe65f79-4dc5-4757-b772-5a99c7ea624f"
            fts_id_ok = service_id == expected_fts_id
            fts_status = "‚úÖ" if fts_id_ok else "‚ùå"
            print(f"  FTS ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:    {fts_status} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_fts_id})")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ FTS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            fts_batch = vars_dict.get('FTS_BATCH', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            fts_interval = vars_dict.get('FTS_CONTINUOUS_INTERVAL', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            print(f"  FTS_BATCH:           {fts_batch}")
            print(f"  FTS_CONTINUOUS_INTERVAL: {fts_interval}")

        print()

        results.append({
            'service': service,
            'mode': service_mode,
            'expected': expected_mode,
            'ok': mode_ok,
            'service_id': service_id
        })

    # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print("=" * 80)
    print("–ò–¢–û–ì–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê")
    print("=" * 80)
    print()
    print(f"{'–°–µ—Ä–≤–∏—Å':<20} {'SERVICE_MODE':<20} {'–û–∂–∏–¥–∞–µ—Ç—Å—è':<20} {'–°—Ç–∞—Ç—É—Å':<10}")
    print("-" * 80)

    for r in results:
        status = "‚úÖ OK" if r['ok'] else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{r['service']:<20} {r['mode']:<20} {r['expected']:<20} {status:<10}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ launcher.py
    print("\n" + "=" * 80)
    print("–ü–†–û–í–ï–†–ö–ê launcher.py")
    print("=" * 80)

    if os.path.exists('launcher.py'):
        with open('launcher.py', 'r', encoding='utf-8') as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
        supported_modes = []
        for mode in expected_modes.values():
            if f'mode == "{mode}"' in content or f"mode == '{mode}'" in content:
                supported_modes.append(mode)

        print(f"\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–∂–∏–º—ã –≤ launcher.py:")
        for mode in set(supported_modes):
            print(f"   - {mode}")

        missing_modes = set(expected_modes.values()) - set(supported_modes)
        if missing_modes:
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∂–∏–º—ã:")
            for mode in missing_modes:
                print(f"   - {mode}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤...")
        lines = content.split('\n')
        indent_issues = []

        for i, line in enumerate(lines, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Ç–∞–±–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
            if '\t' in line and '    ' in line[:len(line) - len(line.lstrip())]:
                indent_issues.append(f"–°—Ç—Ä–æ–∫–∞ {i}: —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Ç–∞–±–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è if/def
            if line.strip().startswith(('if ', 'def ', 'return ')) and not line.startswith(('    ', '\t', 'if ', 'def ', 'return ')):
                if line[0] == ' ':
                    indent_issues.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–ª—è '{line.strip()[:20]}...'")

        if indent_issues:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏:")
            for issue in indent_issues[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   {issue}")
        else:
            print(f"‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    print("\n" + "=" * 80)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 80)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recs = []

    for r in results:
        if not r['ok']:
            recs.append(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SERVICE_MODE={r['expected']} –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ '{r['service']}'")

    if recs:
        print("\n‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n")
        for i, rec in enumerate(recs, 1):
            print(f"{i}. {rec}")
    else:
        print("\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    main()

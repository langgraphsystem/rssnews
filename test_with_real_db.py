#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –Ω–∞—Å—Ç–æ—è—â–µ–π Railway PostgreSQL –ë–î
"""

import os
import sys
import subprocess
import time
from typing import Optional

def run_command(cmd: list, timeout: int = 30) -> tuple[int, str, str]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞, stdout –∏ stderr"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    project_root = os.path.dirname(os.path.abspath(__file__))
    try:
        result = subprocess.run(
            cmd, 
            capture_output=True, 
            text=True, 
            timeout=timeout,
            cwd=project_root
        )
        return result.returncode, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return -1, "", "Timeout expired"
    except Exception as e:
        return -1, "", str(e)

def test_full_cycle_with_db():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PG_DSN...")
    pg_dsn = os.environ.get('PG_DSN')
    if not pg_dsn:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PG_DSN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Railway PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("set PG_DSN=postgresql://postgres:password@host:port/dbname?sslmode=require")
        print("\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É:")
        print('set PG_DSN=postgresql://test:test@localhost:5432/test && python test_with_real_db.py')
        return False
    
    print(f"‚úÖ PG_DSN –Ω–∞–π–¥–µ–Ω: {pg_dsn[:50]}...")
    
    # –¢–µ—Å—Ç 1: Ensure (—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã)
    print("\nüîß –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î (python main.py ensure)...")
    code, stdout, stderr = run_command([sys.executable, "main.py", "ensure"])
    
    if code == 0:
        print("‚úÖ –°—Ö–µ–º–∞ –ë–î —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        if stdout:
            print(f"   Output: {stdout.strip()}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã (–∫–æ–¥ {code})")
        if stderr:
            print(f"   Error: {stderr}")
        if "CONNECTION" in stderr.upper() or "CONNECT" in stderr.upper():
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL")
        return False
    
    # –¢–µ—Å—Ç 2: Discovery (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ RSS)
    print("\nüì° –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ RSS (discovery)...")
    test_feeds = [
        "https://feeds.bbci.co.uk/news/rss.xml",
        "https://rss.cnn.com/rss/edition.rss"
    ]
    
    for feed_url in test_feeds:
        print(f"   –î–æ–±–∞–≤–ª—è–µ–º: {feed_url}")
        code, stdout, stderr = run_command([
            sys.executable, "main.py", "discovery", "--feed", feed_url
        ])
        
        if code == 0:
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {feed_url}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {feed_url} (–∫–æ–¥ {code})")
            if stderr:
                print(f"      Error: {stderr}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∏–¥ –Ω–µ –¥–æ–±–∞–≤–∏–ª—Å—è
    
    # –¢–µ—Å—Ç 3: Poll (–æ–ø—Ä–æ—Å RSS)
    print("\nüì∞ –¢–µ—Å—Ç 3: –û–ø—Ä–æ—Å RSS —Ñ–∏–¥–æ–≤ (poll)...")
    code, stdout, stderr = run_command([sys.executable, "main.py", "poll"], timeout=60)
    
    if code == 0:
        print("‚úÖ –û–ø—Ä–æ—Å RSS –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        if stdout:
            print(f"   Output: {stdout.strip()}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ RSS (–∫–æ–¥ {code})")
        if stderr:
            print(f"   Error: {stderr}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º - –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–¥–æ–≤
    
    # –¢–µ—Å—Ç 4: Work (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π)
    print("\n‚öôÔ∏è –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π (work)...")
    code, stdout, stderr = run_command([
        sys.executable, "main.py", "work", "--worker-id", "test-worker"
    ], timeout=90)
    
    if code == 0:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        if stdout:
            print(f"   Output: {stdout.strip()}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π (–∫–æ–¥ {code})")
        if stderr:
            print(f"   Error: {stderr}")
        # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç pending —Å—Ç–∞—Ç–µ–π
    
    print("\nüéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return True

def test_database_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é"""
    print("\nüîß –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î...")
    
    try:
        from pg_client import PgClient
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = PgClient()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        client.upsert_config("test_key", "test_value")
        value = client.get_config("test_key")
        if value == "test_value":
            print("‚úÖ Config –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            print(f"‚ùå Config –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {value}")
        
        # –¢–µ—Å—Ç feeds
        test_feed = {
            "feed_url": "https://test.com/rss.xml",
            "feed_url_canon": "https://test.com/rss.xml",
            "lang": "en",
            "status": "active",
            "last_entry_date": "",
            "last_crawled": "",
            "no_updates_days": "0",
            "etag": "",
            "last_modified": "",
            "health_score": "100",
            "notes": "test feed",
            "checked_at": ""
        }
        
        client.upsert_feed(test_feed)
        feeds = client.get_active_feeds()
        if feeds:
            print(f"‚úÖ Feeds –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(feeds)} —Ñ–∏–¥–æ–≤")
        else:
            print("‚ö†Ô∏è Feeds –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–¥–æ–≤")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        client.close()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –° POSTGRESQL")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∏–º–ø–æ—Ä—Ç—ã
    try:
        from pg_client import PgClient
        import main, discovery, poller, worker
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return 1
    
    # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
    if not test_database_operations():
        print("\n‚ùå –û—à–∏–±–∫–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –ë–î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return 1
    
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    if not test_full_cycle_with_db():
        print("\n‚ùå –û—à–∏–±–∫–∏ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return 1
    
    print("\n" + "=" * 60)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("=" * 60)
    
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î")
    print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å config, feeds")
    print("‚úÖ –ö–æ–º–∞–Ω–¥—ã: ensure, discovery, poll, work")
    print("‚úÖ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Ü–∏–∫–ª")
    
    print("\nüéØ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    return 0

if __name__ == "__main__":
    sys.exit(main())
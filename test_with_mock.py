#!/usr/bin/env python3
"""
üß™ Testing with Mock GPT-5 Service
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∑–∞–≥–ª—É—à–∫–æ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
import logging
import os
import sys
import time
from datetime import datetime

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('mock_test_results.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# Import mock service
from mock_gpt5_service import MockGPT5Service, create_mock_gpt5_service

class MockDataAnalysisProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å mock GPT-5 —Å–µ—Ä–≤–∏—Å–æ–º"""

    def __init__(self):
        self.gpt5_service = create_mock_gpt5_service("gpt-5")
        logger.info("‚úÖ Mock data analysis processor initialized")

    def _get_test_articles(self, query: str, limit: int = 3):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π"""
        return [
            {
                'title': f'–ê–Ω–∞–ª–∏–∑ {query}: –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã 2025',
                'content': f'–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ {query} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –≠–∫—Å–ø–µ—Ä—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ñ–µ—Ä—ã —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–∞ 40%. –û—Å–Ω–æ–≤–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã —Ä–æ—Å—Ç–∞ –≤–∫–ª—é—á–∞—é—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.',
                'source': 'TechAnalytics',
                'source_domain': 'techanalytics.com',
                'published_at': '2025-09-25T10:00:00',
                'score': 0.95,
                'tags': ['analysis', 'trends', 'technology']
            },
            {
                'title': f'–†—ã–Ω–æ—á–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã {query}',
                'content': f'–†—ã–Ω–æ–∫ {query} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤—É—é —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é —Ä–æ—Å—Ç–∞. –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –ø—Ä–æ—è–≤–ª—è—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –¥–∞–Ω–Ω–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ 25%. –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã.',
                'source': 'MarketInsights',
                'source_domain': 'marketinsights.com',
                'published_at': '2025-09-25T09:30:00',
                'score': 0.88,
                'tags': ['market', 'investment', 'growth']
            },
            {
                'title': f'–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ {query}',
                'content': f'–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ {query} –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏. –ö–æ–º–ø–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ –≤–Ω–µ–¥—Ä—è—é—Ç –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.',
                'source': 'InnovationDaily',
                'source_domain': 'innovation.daily',
                'published_at': '2025-09-25T08:45:00',
                'score': 0.91,
                'tags': ['innovation', 'technology', 'business']
            }
        ]

    def _format_articles_for_gpt(self, articles, include_metadata=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –¥–ª—è GPT"""
        formatted = []
        for i, article in enumerate(articles):
            title = article.get('title', 'No title')[:150]
            content = article.get('content', '')[:400]

            text = f"–°—Ç–∞—Ç—å—è {i+1}:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}\n"

            if include_metadata:
                source = article.get('source', 'Unknown')
                date = article.get('published_at', 'Unknown')
                score = article.get('score', 0)
                text += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n–î–∞—Ç–∞: {date}\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f}\n"

            text += "---\n"
            formatted.append(text)

        return '\n'.join(formatted)

    async def test_analyze_command(self, query: str, timeframe: str = "7d"):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /analyze"""
        logger.info(f"üß† Testing /analyze: {query}")

        articles = self._get_test_articles(query)
        articles_text = self._format_articles_for_gpt(articles, include_metadata=True)

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ {len(articles)} —Å—Ç–∞—Ç–µ–π –æ '{query}':

–î–ê–ù–ù–´–ï:
{articles_text}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑, –≤–∫–ª—é—á–∞—è:
1. –ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
2. –í–∞–∂–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –≤—ã–≤–æ–¥—ã
3. –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
5. –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

–§–æ—Ä–º–∞—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏, —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏."""

        start_time = time.time()
        result = self.gpt5_service.send_analysis(prompt, max_output_tokens=2000)
        processing_time = time.time() - start_time

        return {
            'success': True,
            'result': result,
            'processing_time': processing_time,
            'articles_count': len(articles)
        }

    async def test_summarize_command(self, topic: str, length: str = "medium"):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /summarize"""
        logger.info(f"üìã Testing /summarize: {topic} ({length})")

        articles = self._get_test_articles(topic)
        articles_text = self._format_articles_for_gpt(articles, include_metadata=True)

        prompt = f"""–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É {length} –¥–ª–∏–Ω—ã –ø–æ {len(articles)} —Å—Ç–∞—Ç—å—è–º –Ω–∞ —Ç–µ–º—É '{topic}':

–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
{articles_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–í–û–î–ö–ï:
- –†–∞–∑–º–µ—Ä: {length}
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
- –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤
- –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ–±—ã—Ç–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π —è—Å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏."""

        start_time = time.time()
        result = self.gpt5_service.send_chat(prompt, length=length)
        processing_time = time.time() - start_time

        word_count = len(result.split()) if result else 0

        return {
            'success': True,
            'result': result,
            'processing_time': processing_time,
            'word_count': word_count,
            'length': length
        }

    async def test_aggregate_command(self, metric: str, groupby: str, query: str):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /aggregate"""
        logger.info(f"üìä Testing /aggregate: {metric} by {groupby}")

        articles = self._get_test_articles(query)
        articles_text = self._format_articles_for_gpt(articles, include_metadata=True)

        prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(articles)} —Å—Ç–∞—Ç—å—è–º:

–î–ê–ù–ù–´–ï:
{articles_text}

–ó–ê–î–ê–ß–ê –ê–ì–†–ï–ì–ê–¶–ò–ò:
- –ú–µ—Ç—Ä–∏–∫–∞: {metric}
- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: {groupby}

–ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ —Å —á–µ—Ç–∫–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏."""

        start_time = time.time()
        result = self.gpt5_service.send_bulk(prompt)
        processing_time = time.time() - start_time

        return {
            'success': True,
            'result': result,
            'processing_time': processing_time,
            'metric': metric,
            'groupby': groupby
        }

    async def test_filter_command(self, criteria: str, value: str, query: str):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /filter"""
        logger.info(f"üîç Testing /filter: {criteria} = {value}")

        articles = self._get_test_articles(query)
        articles_text = self._format_articles_for_gpt(articles, include_metadata=True)

        prompt = f"""–í—ã–ø–æ–ª–Ω–∏ —É–º–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:

–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï ({len(articles)} —Å—Ç–∞—Ç–µ–π):
{articles_text}

–ö–†–ò–¢–ï–†–ò–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò:
- –ü–∞—Ä–∞–º–µ—Ç—Ä: {criteria}
- –ó–Ω–∞—á–µ–Ω–∏–µ: {value}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."""

        start_time = time.time()
        result = self.gpt5_service.send_chat(prompt)
        processing_time = time.time() - start_time

        return {
            'success': True,
            'result': result,
            'processing_time': processing_time,
            'criteria': criteria,
            'value': value
        }

    async def test_insights_command(self, topic: str):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /insights"""
        logger.info(f"üí° Testing /insights: {topic}")

        articles = self._get_test_articles(topic)
        articles_text = self._format_articles_for_gpt(articles, include_metadata=True)

        prompt = f"""–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≥–ª—É–±–æ–∫–∏–µ –±–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(articles)} —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ '{topic}':

–ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
{articles_text}

–ü—Ä–µ–¥—Å—Ç–∞–≤—å –∫–∞–∫ executive briefing —Å —á–µ—Ç–∫–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤—ã–≤–æ–¥–∞–º–∏."""

        start_time = time.time()
        result = self.gpt5_service.send_insights(prompt)
        processing_time = time.time() - start_time

        return {
            'success': True,
            'result': result,
            'processing_time': processing_time,
            'topic': topic
        }

    async def test_sentiment_command(self, query: str):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /sentiment"""
        logger.info(f"üòä Testing /sentiment: {query}")

        articles = self._get_test_articles(query)
        articles_text = self._format_articles_for_gpt(articles, include_metadata=True)

        prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ {len(articles)} —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ '{query}':

–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{articles_text}

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏."""

        start_time = time.time()
        result = self.gpt5_service.send_sentiment(prompt)
        processing_time = time.time() - start_time

        return {
            'success': True,
            'result': result,
            'processing_time': processing_time,
            'query': query
        }

    async def test_topics_command(self, scope: str):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /topics"""
        logger.info(f"üè∑Ô∏è Testing /topics: {scope}")

        articles = self._get_test_articles(scope)
        articles_text = self._format_articles_for_gpt(articles, include_metadata=True)

        prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è {len(articles)} —Å—Ç–∞—Ç–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ '{scope}':

–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{articles_text}

–ò—Å–ø–æ–ª—å–∑—É–π –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –∏ —á–µ—Ç–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é."""

        start_time = time.time()
        result = self.gpt5_service.send_analysis(prompt)
        processing_time = time.time() - start_time

        return {
            'success': True,
            'result': result,
            'processing_time': processing_time,
            'scope': scope
        }

    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
        logger.info("üöÄ Starting Comprehensive Mock Testing")
        logger.info("=" * 80)

        results = {}

        # –¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        test_cases = [
            ('analyze', self.test_analyze_command, ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '7d']),
            ('summarize', self.test_summarize_command, ['–ò–ò —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'medium']),
            ('aggregate', self.test_aggregate_command, ['–∏—Å—Ç–æ—á–Ω–∏–∫–∏', '–¥–∞—Ç–∞', '—Ä—ã–Ω–æ–∫']),
            ('filter', self.test_filter_command, ['–∏—Å—Ç–æ—á–Ω–∏–∫', 'tech', '–Ω–æ–≤–æ—Å—Ç–∏']),
            ('insights', self.test_insights_command, ['–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏']),
            ('sentiment', self.test_sentiment_command, ['–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã']),
            ('topics', self.test_topics_command, ['–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏'])
        ]

        total_start = time.time()

        for command_name, test_func, args in test_cases:
            logger.info(f"\n{'='*20} TESTING /{command_name.upper()} {'='*20}")

            try:
                result = await test_func(*args)

                if result['success']:
                    logger.info(f"‚úÖ /{command_name} - SUCCESS")
                    logger.info(f"   ‚è±Ô∏è Processing time: {result['processing_time']:.2f}s")

                    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
                    if command_name == 'analyze':
                        logger.info(f"   üìä Articles analyzed: {result['articles_count']}")
                    elif command_name == 'summarize':
                        logger.info(f"   üìù Word count: {result['word_count']}")
                        logger.info(f"   üìè Length: {result['length']}")
                    elif command_name == 'aggregate':
                        logger.info(f"   üìà Metric: {result['metric']}")
                        logger.info(f"   üóÇÔ∏è Group by: {result['groupby']}")
                    elif command_name == 'filter':
                        logger.info(f"   üîç Criteria: {result['criteria']} = {result['value']}")
                    elif command_name == 'insights':
                        logger.info(f"   üí° Topic: {result['topic']}")
                    elif command_name == 'sentiment':
                        logger.info(f"   üòä Query: {result['query']}")
                    elif command_name == 'topics':
                        logger.info(f"   üè∑Ô∏è Scope: {result['scope']}")

                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    preview = result['result'][:200] + "..." if len(result['result']) > 200 else result['result']
                    logger.info(f"   üìÑ Result preview: {preview}")

                    results[command_name] = {
                        'status': 'SUCCESS',
                        'processing_time': result['processing_time'],
                        'result_length': len(result['result']),
                        'metadata': {k: v for k, v in result.items() if k not in ['result']}
                    }
                else:
                    logger.error(f"‚ùå /{command_name} - FAILED")
                    results[command_name] = {'status': 'FAILED'}

            except Exception as e:
                logger.error(f"‚ùå /{command_name} - ERROR: {str(e)}")
                results[command_name] = {'status': 'ERROR', 'error': str(e)}

        total_time = time.time() - total_start

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report(results, total_time)

        return results

    def generate_final_report(self, results, total_time):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("\n" + "=" * 80)
        logger.info("üìã COMPREHENSIVE MOCK TEST REPORT")
        logger.info("=" * 80)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_commands = len(results)
        successful = sum(1 for r in results.values() if r.get('status') == 'SUCCESS')
        failed = sum(1 for r in results.values() if r.get('status') == 'FAILED')
        errors = sum(1 for r in results.values() if r.get('status') == 'ERROR')

        logger.info(f"üìä OVERALL STATISTICS:")
        logger.info(f"   ‚úÖ Successful: {successful}/{total_commands} ({successful/total_commands*100:.1f}%)")
        logger.info(f"   ‚ùå Failed: {failed}/{total_commands} ({failed/total_commands*100:.1f}%)")
        logger.info(f"   üö´ Errors: {errors}/{total_commands} ({errors/total_commands*100:.1f}%)")
        logger.info(f"   ‚è±Ô∏è Total time: {total_time:.2f}s")

        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        logger.info(f"\nüìã COMMAND DETAILS:")
        for cmd_name, cmd_result in results.items():
            status_emoji = {
                'SUCCESS': '‚úÖ',
                'FAILED': '‚ùå',
                'ERROR': 'üö´'
            }.get(cmd_result.get('status'), '‚ùì')

            logger.info(f"   {status_emoji} /{cmd_name}: {cmd_result.get('status')}")

            if cmd_result.get('status') == 'SUCCESS':
                proc_time = cmd_result.get('processing_time', 0)
                result_len = cmd_result.get('result_length', 0)
                logger.info(f"      ‚è±Ô∏è Time: {proc_time:.2f}s")
                logger.info(f"      üìÑ Result: {result_len} characters")

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if successful > 0:
            success_results = [r for r in results.values() if r.get('status') == 'SUCCESS']
            avg_time = sum(r.get('processing_time', 0) for r in success_results) / len(success_results)
            avg_length = sum(r.get('result_length', 0) for r in success_results) / len(success_results)

            logger.info(f"\nüìä PERFORMANCE ANALYSIS:")
            logger.info(f"   ‚è±Ô∏è Average processing time: {avg_time:.2f}s")
            logger.info(f"   üìÑ Average result length: {avg_length:.0f} characters")

        # –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        logger.info(f"\nüéØ CONCLUSIONS:")
        if successful == total_commands:
            logger.info("üéâ ALL COMMANDS WORKING PERFECTLY!")
            logger.info("‚úÖ System is ready for production use")
        elif successful >= total_commands * 0.8:
            logger.info(f"‚úÖ MOSTLY SUCCESSFUL ({successful}/{total_commands})")
            logger.info("‚ö†Ô∏è Minor issues need attention")
        else:
            logger.info(f"‚ö†Ô∏è NEEDS IMPROVEMENT ({successful}/{total_commands})")
            logger.info("üîß System requires debugging")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'total_time': total_time,
            'summary': {
                'total_commands': total_commands,
                'successful': successful,
                'failed': failed,
                'errors': errors,
                'success_rate': successful / total_commands * 100 if total_commands > 0 else 0
            },
            'detailed_results': results
        }

        try:
            with open('mock_test_comprehensive_report.json', 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            logger.info(f"\nüìÑ Report saved: mock_test_comprehensive_report.json")
        except Exception as e:
            logger.error(f"‚ùå Failed to save report: {e}")

        logger.info("=" * 80)


async def test_single_command_mock(command_name: str):
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å mock —Å–µ—Ä–≤–∏—Å–æ–º"""
    processor = MockDataAnalysisProcessor()

    if command_name == 'analyze':
        result = await processor.test_analyze_command('—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã')
    elif command_name == 'summarize':
        result = await processor.test_summarize_command('—Ä—ã–Ω–æ–∫ –ò–ò', 'medium')
    elif command_name == 'aggregate':
        result = await processor.test_aggregate_command('–∏—Å—Ç–æ—á–Ω–∏–∫–∏', '–¥–∞—Ç–∞', '–Ω–æ–≤–æ—Å—Ç–∏')
    elif command_name == 'filter':
        result = await processor.test_filter_command('–∏—Å—Ç–æ—á–Ω–∏–∫', 'tech.com', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏')
    elif command_name == 'insights':
        result = await processor.test_insights_command('–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã')
    elif command_name == 'sentiment':
        result = await processor.test_sentiment_command('–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫')
    elif command_name == 'topics':
        result = await processor.test_topics_command('—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏')
    else:
        logger.error(f"‚ùå Unknown command: {command_name}")
        return

    logger.info(f"\nüéØ SINGLE COMMAND TEST: /{command_name}")
    logger.info(f"‚úÖ Success: {result.get('success', False)}")
    logger.info(f"‚è±Ô∏è Time: {result.get('processing_time', 0):.2f}s")
    logger.info(f"üìÑ Result length: {len(result.get('result', ''))}")
    logger.info(f"üìã Preview: {result.get('result', '')[:300]}...")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        # –¢–µ—Å—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        command = sys.argv[1]
        await test_single_command_mock(command)
    else:
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç
        processor = MockDataAnalysisProcessor()
        await processor.run_comprehensive_test()


if __name__ == "__main__":
    asyncio.run(main())

#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /trends —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π –≤—Å–µ—Ö —à–∞–≥–æ–≤
"""
import asyncio
import os
import sys
from datetime import datetime

sys.path.insert(0, os.path.dirname(__file__))

async def test_trends_command():
    print("="*100)
    print("–ü–û–õ–ù–´–ô –¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ /trends")
    print("="*100)
    print(f"–í—Ä–µ–º—è: {datetime.now()}\n")

    # –®–ê–ì 1: Telegram Bot –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É
    print("üì± –®–ê–ì 1: Telegram Bot –ø–æ–ª—É—á–∞–µ—Ç /trends")
    print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç: /trends 24h")
    print("   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞\n")

    # –®–ê–ì 2: –†–æ—É—Ç–∏–Ω–≥ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    print("üîÄ –®–ê–ì 2: –†–æ—É—Ç–∏–Ω–≥ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É")
    print("   –§–∞–π–ª: bot_service/advanced_bot.py")
    print("   –ú–µ—Ç–æ–¥: handle_trends_command()")
    print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω\n")

    # –®–ê–ì 3: –í—ã–∑–æ–≤ Orchestrator
    print("üéØ –®–ê–ì 3: –í—ã–∑–æ–≤ Orchestrator")
    print("   –§–∞–π–ª: services/orchestrator.py")
    print("   –§—É–Ω–∫—Ü–∏—è: execute_trends_command()")

    try:
        from services.orchestrator import execute_trends_command

        # –í—ã–∑—ã–≤–∞–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        payload = await execute_trends_command(
            window='24h',
            lang='auto',
            k_final=5
        )

        print("   ‚úÖ Orchestrator –≤—ã–∑–≤–∞–Ω")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: window=24h, lang=auto, k_final=5\n")

        # –®–ê–ì 4: Orchestrator ‚Üí Retrieval Node
        print("üîç –®–ê–ì 4: Retrieval Node")
        print("   –§–∞–π–ª: core/orchestrator/nodes/retrieval_node.py")
        print("   –§—É–Ω–∫—Ü–∏—è: retrieval_node()")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        if 'context' in payload:
            print(f"   ‚úÖ State –ø–µ—Ä–µ–¥–∞–Ω –≤ retrieval_node\n")

        # –®–ê–ì 5: Retrieval Client
        print("üìö –®–ê–ì 5: Retrieval Client")
        print("   –§–∞–π–ª: core/rag/retrieval_client.py")
        print("   –ú–µ—Ç–æ–¥: retrieve()")

        # –®–ê–ì 6: Ranking API
        print("\n‚ö° –®–ê–ì 6: Ranking API")
        print("   –§–∞–π–ª: ranking_api.py")
        print("   –ú–µ—Ç–æ–¥: retrieve_for_analysis()")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∑–∞ 24 —á–∞—Å–∞ –±–µ–∑ query")

        # –®–ê–ì 7: –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î
        print("\nüóÑÔ∏è  –®–ê–ì 7: –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("   –§–∞–π–ª: database/production_db_client.py")
        print("   –ú–µ—Ç–æ–¥: get_recent_articles()")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        from database.production_db_client import ProductionDBClient
        db = ProductionDBClient()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É article_chunks
        with db._cursor() as cur:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ 24 —á–∞—Å–∞
            cur.execute("""
                SELECT COUNT(*)
                FROM article_chunks
                WHERE published_at >= NOW() - INTERVAL '24 hours'
            """)
            count_24h = cur.fetchone()[0]

            print(f"   üìä –¢–∞–±–ª–∏—Ü–∞: article_chunks")
            print(f"   üìà –ó–∞–ø–∏—Å–µ–π –∑–∞ 24—á: {count_24h:,}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ embeddings
            cur.execute("""
                SELECT
                    COUNT(*) FILTER (WHERE embedding_vector IS NOT NULL) as with_emb,
                    COUNT(*) FILTER (WHERE text IS NOT NULL) as with_text
                FROM article_chunks
                WHERE published_at >= NOW() - INTERVAL '24 hours'
                LIMIT 1
            """)
            row = cur.fetchone()

            print(f"   ‚úÖ –° embedding_vector: {row[0]:,}")
            print(f"   ‚úÖ –° —Ç–µ–∫—Å—Ç–æ–º: {row[1]:,}")

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            cur.execute("""
                SELECT title_norm, published_at
                FROM article_chunks
                WHERE published_at >= NOW() - INTERVAL '24 hours'
                AND text IS NOT NULL
                ORDER BY published_at DESC
                LIMIT 3
            """)

            examples = cur.fetchall()
            print(f"\n   üì∞ –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç–µ–π:")
            for i, (title, pub_at) in enumerate(examples, 1):
                pub_time = pub_at.strftime('%H:%M') if pub_at else 'unknown'
                print(f"      {i}. [{pub_time}] {title[:70]}...")

        print("\n   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î")

        # –®–ê–ì 8: Scoring –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüìä –®–ê–ì 8: Scoring –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("   –§–∞–π–ª: ranking_api.py")
        print("   –ú–µ—Ç–æ–¥: score_and_rank()")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ scores –∫–∞–∂–¥–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É")
        print("   ‚úÖ Scoring –≤—ã–ø–æ–ª–Ω–µ–Ω")

        # –®–ê–ì 9: –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
        print("\nüîÑ –®–ê–ì 9: –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è")
        print("   –§–∞–π–ª: ranking_api.py")
        print("   –ú–µ—Ç–æ–¥: canonicalize_articles()")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ LSH")
        print("   ‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        # –®–ê–ì 10: Agents Node
        print("\nü§ñ –®–ê–ì 10: Agents Node")
        print("   –§–∞–π–ª: core/orchestrator/nodes/agents_node.py")
        print("   –§—É–Ω–∫—Ü–∏—è: agents_node()")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Å –ø–æ–º–æ—â—å—é AI")
        print("   ‚úÖ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        # –®–ê–ì 11: Format Node
        print("\n‚ú® –®–ê–ì 11: Format Node")
        print("   –§–∞–π–ª: core/orchestrator/nodes/format_node.py")
        print("   –§—É–Ω–∫—Ü–∏—è: format_node()")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram")
        print("   ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        # –®–ê–ì 12: Validate Node
        print("\n‚úì –®–ê–ì 12: Validate Node")
        print("   –§–∞–π–ª: core/orchestrator/nodes/validate_node.py")
        print("   –§—É–Ω–∫—Ü–∏—è: validate_node()")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞")
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")

        # –®–ê–ì 13: –í–æ–∑–≤—Ä–∞—Ç –≤ Orchestrator Service
        print("\n‚Ü©Ô∏è  –®–ê–ì 13: –í–æ–∑–≤—Ä–∞—Ç –≤ Orchestrator Service")
        print("   –§–∞–π–ª: services/orchestrator.py")
        print("   –ú–µ—Ç–æ–¥: handle_trends_command()")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: –£–ø–∞–∫–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ payload")

        if 'text' in payload:
            print(f"   ‚úÖ Payload —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
            print(f"   üìù –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(payload['text'])} —Å–∏–º–≤–æ–ª–æ–≤")

        # –®–ê–ì 14: –í–æ–∑–≤—Ä–∞—Ç –≤ Bot
        print("\nüì§ –®–ê–ì 14: –í–æ–∑–≤—Ä–∞—Ç –≤ Bot")
        print("   –§–∞–π–ª: bot_service/advanced_bot.py")
        print("   –ú–µ—Ç–æ–¥: _send_orchestrator_payload()")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

        if payload:
            print("   ‚úÖ Payload –ø–æ–ª—É—á–µ–Ω –±–æ—Ç–æ–º")

        # –®–ê–ì 15: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print("\nüì≤ –®–ê–ì 15: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        print("   API: Telegram Bot API")
        print("   –ú–µ—Ç–æ–¥: sendMessage()")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞
        if 'text' in payload:
            preview = payload['text'][:300]
            print(f"\n   üìÑ –ü—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞:")
            print(f"   {'-'*70}")
            print(f"   {preview}...")
            print(f"   {'-'*70}")

        print("\n   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        # –ò–¢–û–ì
        print("\n" + "="*100)
        print("–ò–¢–û–ì–û–í–ê–Ø –°–•–ï–ú–ê –ö–û–ú–ê–ù–î–´ /trends")
        print("="*100)
        print("""
1Ô∏è‚É£  Telegram Bot (–≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    ‚Üì
2Ô∏è‚É£  bot_service/advanced_bot.py::handle_trends_command()
    ‚Üì
3Ô∏è‚É£  services/orchestrator.py::execute_trends_command()
    ‚Üì
4Ô∏è‚É£  core/orchestrator/orchestrator.py::execute_trends()
    ‚Üì
5Ô∏è‚É£  core/orchestrator/nodes/retrieval_node.py::retrieval_node()
    ‚Üì
6Ô∏è‚É£  core/rag/retrieval_client.py::retrieve()
    ‚Üì
7Ô∏è‚É£  ranking_api.py::retrieve_for_analysis()
    ‚Üì
8Ô∏è‚É£  database/production_db_client.py::get_recent_articles()
    ‚Üì
    [–ë–ê–ó–ê –î–ê–ù–ù–´–•: article_chunks]
    - –¢–∞–±–ª–∏—Ü–∞: article_chunks
    - –§–∏–ª—å—Ç—Ä: published_at >= NOW() - INTERVAL '24 hours'
    - –°—Ç–æ–ª–±—Ü—ã: text, embedding_vector, title_norm, url, published_at
    ‚Üì
9Ô∏è‚É£  ranking_service/scoring.py::score_and_rank()
    ‚Üì
üîü ranking_service/deduplication.py::canonicalize_articles()
    ‚Üì
1Ô∏è‚É£1Ô∏è‚É£ core/orchestrator/nodes/agents_node.py::agents_node()
    ‚Üì
1Ô∏è‚É£2Ô∏è‚É£ core/orchestrator/nodes/format_node.py::format_node()
    ‚Üì
1Ô∏è‚É£3Ô∏è‚É£ core/orchestrator/nodes/validate_node.py::validate_node()
    ‚Üì
1Ô∏è‚É£4Ô∏è‚É£ –û—Ç–≤–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Å—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞—Ç–Ω–æ
    ‚Üì
1Ô∏è‚É£5Ô∏è‚É£ Telegram Bot ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """)

        print("\n‚úÖ –ö–û–ú–ê–ù–î–ê /trends –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
        print(f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   - –°—Ç–∞—Ç–µ–π –∑–∞ 24—á: {count_24h:,}")
        print(f"   - –° embeddings: {row[0]:,}")
        print(f"   - –§–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {payload.get('context', {}).get('k_final', 'unknown')}")

        return True

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_trends_command())
    sys.exit(0 if success else 1)

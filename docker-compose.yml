version: '3.8'

services:
  # Main application
  rss-news:
    build: .
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - PG_DSN=postgresql://postgres:${DB_PASSWORD}@postgres:5432/rssnews
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=qwen2.5-coder:3b
      - ENABLE_LOCAL_CHUNKING=true
      - ENABLE_LOCAL_EMBEDDINGS=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    depends_on:
      - postgres
      - redis
      - ollama
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - rss-network

  # PostgreSQL database with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_DB=rssnews
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema_extensions.sql:/docker-entrypoint-initdb.d/schema_extensions.sql
    restart: unless-stopped
    networks:
      - rss-network

  # Redis for caching and queues
  redis:
    image: redis:5.0-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - rss-network

  # Ollama for local LLM
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    networks:
      - rss-network

  # Service manager (background processing)
  service-manager:
    build: .
    command: python services/service_manager.py start
    environment:
      - PYTHONPATH=/app
      - PG_DSN=postgresql://postgres:${DB_PASSWORD}@postgres:5432/rssnews
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=qwen2.5-coder:3b
      - ENABLE_LOCAL_CHUNKING=true
      - ENABLE_LOCAL_EMBEDDINGS=true
    depends_on:
      - postgres
      - redis
      - ollama
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - rss-network

  # Telegram bot
  telegram-bot:
    build: .
    command: python bot_service/advanced_bot.py
    environment:
      - PYTHONPATH=/app
      - PG_DSN=postgresql://postgres:${DB_PASSWORD}@postgres:5432/rssnews
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
      - rss-news
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - rss-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - rss-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - rss-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  rss-network:
    driver: bridge
#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ö–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ search_with_time_filter
2. –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
3. –ö–∞–∫–æ–π –∏–Ω–¥–µ–∫—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞
"""
import asyncio
import os
from datetime import datetime, timezone
from pg_client_new import PgClient

async def main():
    print("=" * 80)
    print("–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–û–ú–ê–ù–î–´ /ANALYZE")
    print("=" * 80)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    pg_dsn = os.getenv("PG_DSN")
    if not pg_dsn:
        print("‚ùå PG_DSN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    client = PgClient(pg_dsn)
    await client.initialize()

    print(f"\nüìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {pg_dsn.split('@')[1] if '@' in pg_dsn else 'unknown'}")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã articles
    print("\n" + "=" * 80)
    print("1. –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ articles")
    print("=" * 80)

    async with client._cursor() as cur:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
        await cur.execute("""
            SELECT
                column_name,
                data_type,
                character_maximum_length,
                is_nullable
            FROM information_schema.columns
            WHERE table_name = 'articles'
            AND column_name IN ('embedding', 'embedding_vector', 'embedding_3072', 'text_search_vector')
            ORDER BY ordinal_position
        """)

        columns = await cur.fetchall()
        if columns:
            print("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            for col in columns:
                print(f"  - {col[0]:<25} | –¢–∏–ø: {col[1]:<20} | NULL: {col[3]}")
        else:
            print("‚ö†Ô∏è  –°—Ç–æ–ª–±—Ü—ã embedding/text_search_vector –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    print("\n" + "=" * 80)
    print("2. –ò–ù–î–ï–ö–°–´ –ù–ê –¢–ê–ë–õ–ò–¶–ï articles")
    print("=" * 80)

    async with client._cursor() as cur:
        await cur.execute("""
            SELECT
                indexname,
                indexdef
            FROM pg_indexes
            WHERE tablename = 'articles'
            AND (
                indexdef ILIKE '%embedding%'
                OR indexdef ILIKE '%text_search%'
                OR indexdef ILIKE '%tsvector%'
            )
            ORDER BY indexname
        """)

        indexes = await cur.fetchall()
        if indexes:
            print("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            for idx in indexes:
                print(f"\n  üìå {idx[0]}")
                print(f"     {idx[1][:100]}...")
        else:
            print("‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
    print("\n" + "=" * 80)
    print("3. –î–ê–ù–ù–´–ï –í –°–¢–û–õ–ë–¶–ê–• (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)")
    print("=" * 80)

    async with client._cursor() as cur:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü
        columns_to_check = [
            ('embedding', 'Embeddings (—Ç–µ–∫—Å—Ç)'),
            ('embedding_vector', 'Embeddings (vector)'),
            ('embedding_3072', 'Embeddings 3072'),
            ('text_search_vector', 'Full-text search (tsvector)')
        ]

        for col_name, description in columns_to_check:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
                await cur.execute(f"""
                    SELECT 1
                    FROM information_schema.columns
                    WHERE table_name = 'articles'
                    AND column_name = %s
                """, (col_name,))

                if not await cur.fetchone():
                    print(f"\n  ‚ùå {description}")
                    print(f"     –°—Ç–æ–ª–±–µ—Ü '{col_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ 24 —á–∞—Å–∞
                await cur.execute(f"""
                    SELECT COUNT(*)
                    FROM articles
                    WHERE published_at >= NOW() - INTERVAL '24 hours'
                    AND {col_name} IS NOT NULL
                """)

                count_with_data = (await cur.fetchone())[0]

                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ 24 —á–∞—Å–∞
                await cur.execute("""
                    SELECT COUNT(*)
                    FROM articles
                    WHERE published_at >= NOW() - INTERVAL '24 hours'
                """)

                total_count = (await cur.fetchone())[0]

                if total_count > 0:
                    percentage = (count_with_data / total_count) * 100
                    status = "‚úÖ" if percentage > 80 else "‚ö†Ô∏è" if percentage > 20 else "‚ùå"
                    print(f"\n  {status} {description}")
                    print(f"     –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {count_with_data}/{total_count} ({percentage:.1f}%)")

                    if count_with_data > 0:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                        await cur.execute(f"""
                            SELECT id, title_norm, published_at
                            FROM articles
                            WHERE published_at >= NOW() - INTERVAL '24 hours'
                            AND {col_name} IS NOT NULL
                            ORDER BY published_at DESC
                            LIMIT 3
                        """)

                        examples = await cur.fetchall()
                        if examples:
                            print(f"     –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏:")
                            for ex in examples:
                                pub_time = ex[2].strftime('%Y-%m-%d %H:%M') if ex[2] else 'unknown'
                                print(f"       ‚Ä¢ [{pub_time}] {ex[1][:60]}...")
                else:
                    print(f"\n  ‚ö†Ô∏è  {description}")
                    print(f"     –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")

            except Exception as e:
                print(f"\n  ‚ùå {description}")
                print(f"     –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ search_with_time_filter
    print("\n" + "=" * 80)
    print("4. –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–†–û–° search_with_time_filter")
    print("=" * 80)

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥
        test_embedding = [0.1] * 1536  # Fake embedding

        print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É 'AI'...")
        results = await client.search_with_time_filter(
            query="AI",
            query_embedding=test_embedding,
            hours=24,
            limit=5,
            filters={}
        )

        if results:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            print("\n–ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for i, result in enumerate(results[:3], 1):
                print(f"\n  {i}. {result.get('title_norm', 'No title')[:60]}...")
                print(f"     URL: {result.get('url', 'N/A')}")
                print(f"     –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {result.get('published_at', 'N/A')}")
                scores = result.get('scores', {})
                if scores:
                    print(f"     Scores: {scores}")
        else:
            print("\n‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("  1. –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")
            print("  2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç embeddings –≤ –±–∞–∑–µ")
            print("  3. –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–∞")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()

    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    print("\n" + "=" * 80)
    print("5. –ê–ù–ê–õ–ò–ó SQL –ó–ê–ü–†–û–°–ê")
    print("=" * 80)

    print("\nüìù –ö–æ–¥ –º–µ—Ç–æ–¥–∞ search_with_time_filter –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ:")
    print("   pg_client_new.py")

    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –º–µ—Ç–æ–¥–∞
    try:
        import inspect
        source = inspect.getsource(client.search_with_time_filter)

        # –ò—â–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã –≤ –∫–æ–¥–µ
        import re
        sql_queries = re.findall(r'(SELECT.*?FROM.*?)(?:\"\"\"|\'\'\')', source, re.DOTALL | re.IGNORECASE)

        if sql_queries:
            print("\nüîç SQL –∑–∞–ø—Ä–æ—Å—ã –≤ –º–µ—Ç–æ–¥–µ:")
            for i, sql in enumerate(sql_queries[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                print(f"\n  –ó–∞–ø—Ä–æ—Å {i}:")
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                sql_clean = ' '.join(sql.split())[:200]
                print(f"  {sql_clean}...")
    except Exception as e:
        print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å SQL: {e}")

    print("\n" + "=" * 80)
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 80)

    async with client._cursor() as cur:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        await cur.execute("""
            SELECT
                COUNT(*) FILTER (WHERE embedding IS NOT NULL) as emb_text,
                COUNT(*) FILTER (WHERE embedding_vector IS NOT NULL) as emb_vector,
                COUNT(*) FILTER (WHERE text_search_vector IS NOT NULL) as fts
            FROM articles
            WHERE published_at >= NOW() - INTERVAL '24 hours'
        """)

        stats = await cur.fetchone()

        print("\n–î–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:")
        print("  1. –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (semantic + FTS)")
        print("  2. –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä (hours)")

        if stats:
            print(f"\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (24—á):")
            print(f"  - embedding (—Ç–µ–∫—Å—Ç):     {stats[0]} –∑–∞–ø–∏—Å–µ–π")
            print(f"  - embedding_vector:      {stats[1]} –∑–∞–ø–∏—Å–µ–π")
            print(f"  - text_search_vector:    {stats[2]} –∑–∞–ø–∏—Å–µ–π")

            if stats[1] > 0:
                print("\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å embedding_vector (pgvector)")
            elif stats[0] > 0:
                print("\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ embedding_vector")
            else:
                print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç embeddings –≤ –±–∞–∑–µ!")
                print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embeddings")

    await client.close()

if __name__ == "__main__":
    asyncio.run(main())

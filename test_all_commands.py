#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –∑–∞–ø—Ä–æ—Å ‚Üí –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚Üí –æ—Ç–≤–µ—Ç
"""
import asyncio
import os
import sys
from typing import Dict, Any, List
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
sys.path.insert(0, os.path.dirname(__file__))

async def analyze_command(command_name: str, test_query: str = None):
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π"""
    print(f"\n{'='*100}")
    print(f"–ê–ù–ê–õ–ò–ó –ö–û–ú–ê–ù–î–´: /{command_name}")
    print(f"{'='*100}")

    if test_query:
        print(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_query}")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    results = {
        'command': command_name,
        'query': test_query,
        'steps': [],
        'db_tables': [],
        'db_columns': [],
        'errors': [],
        'success': False
    }

    try:
        # –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        print(f"\nüìç –®–ê–ì 1: –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
        print(f"   –§–∞–π–ª: bot_service/advanced_bot.py")

        handler_name = f"handle_{command_name}_command"
        print(f"   –ú–µ—Ç–æ–¥: {handler_name}()")
        results['steps'].append(f"Handler: {handler_name}")

        # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        print(f"\nüìç –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")

        import subprocess

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞
        cmd = f'grep -n "async def {handler_name}" bot_service/advanced_bot.py'
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)

        if result.stdout:
            line_num = result.stdout.split(':')[0]
            print(f"   –ù–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ: {line_num}")

            # –ß–∏—Ç–∞–µ–º –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            cmd = f'sed -n "{line_num},+50p" bot_service/advanced_bot.py'
            code_result = subprocess.run(cmd, shell=True, capture_output=True, text=True)

            code = code_result.stdout
            results['steps'].append(f"Code location: line {line_num}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã
            if 'execute_' in code:
                # –ò—â–µ–º –≤—ã–∑–æ–≤—ã execute_*
                import re
                execute_calls = re.findall(r'execute_(\w+)', code)
                if execute_calls:
                    print(f"   –í—ã–∑–æ–≤—ã orchestrator:")
                    for call in set(execute_calls):
                        print(f"      ‚Üí execute_{call}()")
                        results['steps'].append(f"Orchestrator: execute_{call}")

            if 'RankingAPI' in code or 'ranking_api' in code:
                print(f"   –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤: RankingAPI")
                results['steps'].append("Direct: RankingAPI")

            if 'ProductionDBClient' in code or 'db_client' in code:
                print(f"   –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤: ProductionDBClient")
                results['steps'].append("Direct: ProductionDBClient")

        else:
            print(f"   ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            results['errors'].append(f"Handler {handler_name} not found")
            return results

        # –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ë–î
        print(f"\nüìç –®–ê–ì 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î")

        # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
        table_mappings = {
            'search': ['article_chunks', 'articles'],
            'trends': ['article_chunks', 'articles'],
            'analyze': ['article_chunks', 'articles'],
            'ask': ['article_chunks', 'articles'],
            'summarize': ['articles', 'article_chunks'],
            'aggregate': ['articles'],
            'filter': ['articles'],
            'insights': ['articles', 'article_chunks'],
            'sentiment': ['articles', 'article_chunks'],
            'topics': ['articles', 'article_chunks'],
            'gpt': ['articles', 'article_chunks'],
        }

        tables = table_mappings.get(command_name, ['unknown'])
        results['db_tables'] = tables

        print(f"   –¢–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")

        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        print(f"\nüìç –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")

        from database.production_db_client import ProductionDBClient
        pg_dsn = os.getenv("PG_DSN") or os.getenv("DATABASE_URL")

        if not pg_dsn:
            print(f"   ‚ö†Ô∏è  PG_DSN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Railway")
            # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Railway
            check_cmd = f'railway run python -c "import os; print(os.getenv(\\"DATABASE_URL\\"))"'
            result = subprocess.run(check_cmd, shell=True, capture_output=True, text=True, timeout=30)
            if result.stdout and result.stdout.strip():
                pg_dsn = result.stdout.strip()

        if pg_dsn:
            db = ProductionDBClient(pg_dsn)

            for table in tables:
                if table == 'unknown':
                    continue

                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                    with db._cursor() as cur:
                        cur.execute(f"SELECT COUNT(*) FROM {table}")
                        count = cur.fetchone()[0]
                        print(f"   ‚úÖ {table}: {count:,} –∑–∞–ø–∏—Å–µ–π")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                        if table == 'article_chunks':
                            cur.execute("""
                                SELECT
                                    COUNT(*) FILTER (WHERE embedding_vector IS NOT NULL) as with_vector,
                                    COUNT(*) FILTER (WHERE text_search_vector IS NOT NULL) as with_fts
                                FROM article_chunks
                                WHERE published_at >= NOW() - INTERVAL '24 hours'
                            """)
                            row = cur.fetchone()
                            print(f"      - embedding_vector (24—á): {row[0]:,}")
                            print(f"      - text_search_vector (24—á): {row[1]:,}")
                            results['db_columns'].extend(['embedding_vector', 'text_search_vector'])

                        elif table == 'articles':
                            cur.execute("""
                                SELECT
                                    COUNT(*) FILTER (WHERE content IS NOT NULL) as with_content,
                                    COUNT(*) FILTER (WHERE clean_text IS NOT NULL) as with_clean
                                FROM articles
                                WHERE published_at >= NOW() - INTERVAL '24 hours'
                            """)
                            row = cur.fetchone()
                            print(f"      - content (24—á): {row[0]:,}")
                            print(f"      - clean_text (24—á): {row[1]:,}")
                            results['db_columns'].extend(['content', 'clean_text'])

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {table}: {e}")
                    results['errors'].append(f"DB check failed: {table}: {e}")

        else:
            print(f"   ‚ö†Ô∏è  –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            results['errors'].append("No database connection")

        # –®–∞–≥ 5: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        print(f"\nüìç –®–ê–ì 5: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")

        if test_query and command_name in ['search', 'analyze', 'trends']:
            print(f"   –í—ã–ø–æ–ª–Ω—è—é: /{command_name} {test_query}")

            try:
                if command_name == 'search':
                    from ranking_api import RankingAPI
                    from schemas.ranking_schemas import SearchRequest

                    api = RankingAPI()
                    request = SearchRequest(
                        query=test_query,
                        method='hybrid',
                        limit=3,
                        explain=True
                    )

                    response = await api.search(request)
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(response.results)}")

                    if response.results:
                        print(f"   –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
                        first = response.results[0]
                        print(f"      - {first.get('title_norm', 'No title')[:80]}")
                        print(f"      - Scores: {first.get('scores', {})}")

                    results['success'] = True

                elif command_name == 'analyze':
                    from services.orchestrator import execute_analyze_command

                    payload = await execute_analyze_command(
                        mode='keywords',
                        query=test_query,
                        window='24h'
                    )

                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                    if 'text' in payload:
                        preview = payload['text'][:200] if len(payload['text']) > 200 else payload['text']
                        print(f"   –ü—Ä–µ–≤—å—é: {preview}...")

                    results['success'] = True

                elif command_name == 'trends':
                    from services.orchestrator import execute_trends_command

                    payload = await execute_trends_command(
                        window='24h',
                        k_final=3
                    )

                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                    if 'text' in payload:
                        preview = payload['text'][:200] if len(payload['text']) > 200 else payload['text']
                        print(f"   –ü—Ä–µ–≤—å—é: {preview}...")

                    results['success'] = True

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
                results['errors'].append(f"Test failed: {e}")
                import traceback
                traceback.print_exc()

        else:
            print(f"   ‚è≠Ô∏è  –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç test_query –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")

        # –®–∞–≥ 6: –ü—É—Ç—å –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìç –®–ê–ì 6: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        print(f"   1Ô∏è‚É£  Telegram Bot ‚Üí advanced_bot.py::{handler_name}()")

        if results['steps']:
            for i, step in enumerate(results['steps'], 2):
                print(f"   {i}Ô∏è‚É£  {step}")

        if results['db_tables']:
            print(f"   üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {', '.join(results['db_tables'])}")

        if results['db_columns']:
            print(f"   üìä –°—Ç–æ–ª–±—Ü—ã: {', '.join(set(results['db_columns']))}")

        print(f"   üîô –û—Ç–≤–µ—Ç ‚Üí Telegram Bot ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        results['errors'].append(f"Critical: {e}")
        import traceback
        traceback.print_exc()

    return results

async def main():
    print("="*100)
    print("–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ö–û–ú–ê–ù–î TELEGRAM –ë–û–¢–ê")
    print("="*100)
    print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    commands_to_test = [
        ('search', 'AI technology'),
        ('trends', None),
        ('analyze', 'artificial intelligence'),
        ('ask', 'What is happening with AI?'),
        ('summarize', 'latest AI news'),
        ('aggregate', None),
        ('filter', None),
        ('insights', 'AI trends'),
        ('sentiment', 'AI regulation'),
        ('topics', None),
        ('gpt', 'explain quantum computing'),
    ]

    all_results = []

    for command, query in commands_to_test:
        try:
            result = await analyze_command(command, query)
            all_results.append(result)

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(1)

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {command}: {e}")
            all_results.append({
                'command': command,
                'query': query,
                'errors': [str(e)],
                'success': False
            })

    # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print(f"\n{'='*100}")
    print("–ò–¢–û–ì–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê")
    print(f"{'='*100}\n")

    print(f"{'–ö–æ–º–∞–Ω–¥–∞':<15} {'–¢–∞–±–ª–∏—Ü—ã –ë–î':<40} {'–°—Ç–∞—Ç—É—Å':<15} {'–û—à–∏–±–∫–∏':<30}")
    print("-"*100)

    for result in all_results:
        cmd = result['command']
        tables = ', '.join(result.get('db_tables', ['unknown']))
        status = '‚úÖ OK' if result.get('success') else '‚ö†Ô∏è  Needs Check'
        errors = '; '.join(result.get('errors', [])[:2]) if result.get('errors') else '-'

        print(f"{cmd:<15} {tables:<40} {status:<15} {errors:<30}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*100}")
    print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*100}\n")

    total = len(all_results)
    success = len([r for r in all_results if r.get('success')])
    with_errors = len([r for r in all_results if r.get('errors')])

    print(f"üìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success}")
    print(f"‚ö†Ô∏è  –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {with_errors}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success/total*100:.1f}%")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = 'COMMAND_ANALYSIS_REPORT.md'
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(f"# –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞\n\n")
        f.write(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        f.write(f"## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        f.write(f"- –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total}\n")
        f.write(f"- –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success}\n")
        f.write(f"- –° –æ—à–∏–±–∫–∞–º–∏: {with_errors}\n\n")
        f.write(f"## –î–µ—Ç–∞–ª–∏\n\n")

        for result in all_results:
            f.write(f"### /{result['command']}\n\n")
            f.write(f"**–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:** {result.get('query', 'N/A')}\n\n")
            f.write(f"**–¢–∞–±–ª–∏—Ü—ã –ë–î:** {', '.join(result.get('db_tables', ['unknown']))}\n\n")
            f.write(f"**–°—Ç–æ–ª–±—Ü—ã:** {', '.join(set(result.get('db_columns', ['unknown'])))}\n\n")

            if result.get('steps'):
                f.write(f"**–®–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n")
                for step in result['steps']:
                    f.write(f"- {step}\n")
                f.write("\n")

            if result.get('errors'):
                f.write(f"**–û—à–∏–±–∫–∏:**\n")
                for error in result['errors']:
                    f.write(f"- ‚ùå {error}\n")
                f.write("\n")

            f.write(f"**–°—Ç–∞—Ç—É—Å:** {'‚úÖ OK' if result.get('success') else '‚ö†Ô∏è Needs Check'}\n\n")
            f.write("---\n\n")

    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

if __name__ == "__main__":
    asyncio.run(main())

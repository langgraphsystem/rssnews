#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ launcher.py
"""
import os
import sys
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(__file__))

from launcher import build_command

def test_mode(mode_name, env_vars=None):
    """Test a specific SERVICE_MODE"""
    print(f"\n{'='*80}")
    print(f"–¢–µ—Å—Ç–∏—Ä—É—é —Ä–µ–∂–∏–º: {mode_name}")
    print(f"{'='*80}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if env_vars:
        for key, value in env_vars.items():
            os.environ[key] = str(value)

    os.environ['SERVICE_MODE'] = mode_name

    try:
        cmd = build_command()
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞: {cmd}")
        return True
    except SystemExit as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ {e.code}")
        return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False
    finally:
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if env_vars:
            for key in env_vars.keys():
                os.environ.pop(key, None)

def main():
    print("="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –†–ï–ñ–ò–ú–û–í launcher.py")
    print("="*80)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_cases = [
        ("poll", {"POLL_WORKERS": "10", "POLL_BATCH": "10"}),
        ("work", {"WORK_WORKERS": "10", "WORK_BATCH": "50"}),
        ("work", {"WORK_WORKERS": "10", "WORK_BATCH": "50", "WORK_SIMPLIFIED": "true"}),
        ("work-continuous", {"WORK_CONTINUOUS_INTERVAL": "30", "WORK_CONTINUOUS_BATCH": "50"}),
        ("embedding", {"EMBEDDING_BATCH": "1000"}),
        ("chunking", {"CHUNKING_BATCH": "100"}),
        ("chunk-continuous", {"CHUNK_CONTINUOUS_INTERVAL": "30", "CHUNK_CONTINUOUS_BATCH": "100"}),
        ("fts", {"FTS_BATCH": "100000"}),
        ("fts-continuous", {"FTS_CONTINUOUS_INTERVAL": "60"}),
        ("openai-migration", {"MIGRATION_INTERVAL": "60", "MIGRATION_BATCH": "100"}),
        ("bot", {}),
        ("invalid-mode", {}),  # –î–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    ]

    results = []

    for mode, env_vars in test_cases:
        success = test_mode(mode, env_vars)
        results.append((mode, success))

    # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print("\n" + "="*80)
    print("–ò–¢–û–ì–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê")
    print("="*80)
    print()
    print(f"{'–†–µ–∂–∏–º':<25} {'–°—Ç–∞—Ç—É—Å':<10} {'–û–∂–∏–¥–∞–µ—Ç—Å—è':<15}")
    print("-"*80)

    for mode, success in results:
        expected = "fail" if mode == "invalid-mode" else "success"
        actual = "success" if success else "fail"
        status = "‚úÖ" if (actual == expected) else "‚ùå"

        print(f"{mode:<25} {status} {actual:<10} {expected:<15}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    print("\n" + "="*80)
    print("–ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
    print("="*80)

    documented_modes = [
        "poll", "work", "work-continuous", "embedding",
        "chunking", "chunk-continuous", "openai-migration", "bot"
    ]

    # –ù–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã FTS
    new_fts_modes = ["fts", "fts-continuous"]

    print("\nüìã –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
    for mode in documented_modes:
        found = any(r[0] == mode and r[1] for r in results)
        status = "‚úÖ" if found else "‚ùå"
        print(f"  {status} {mode}")

    print("\nüÜï –ù–æ–≤—ã–µ FTS —Ä–µ–∂–∏–º—ã:")
    for mode in new_fts_modes:
        found = any(r[0] == mode and r[1] for r in results)
        status = "‚úÖ" if found else "‚ùå"
        print(f"  {status} {mode}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è FTS
    print("\n" + "="*80)
    print("–î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê FTS –†–ï–ñ–ò–ú–û–í")
    print("="*80)

    print("\nüîç FTS —Ä–µ–∂–∏–º (one-off):")
    os.environ['SERVICE_MODE'] = 'fts'
    os.environ['FTS_BATCH'] = '50000'
    cmd = build_command()
    print(f"  –ö–æ–º–∞–Ω–¥–∞: {cmd}")
    expected_fts = "python main.py services run-once --services fts --fts-batch 50000"
    if cmd == expected_fts:
        print(f"  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print(f"  ‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_fts}")

    print("\nüîç FTS-continuous —Ä–µ–∂–∏–º:")
    os.environ['SERVICE_MODE'] = 'fts-continuous'
    os.environ['FTS_CONTINUOUS_INTERVAL'] = '120'
    cmd = build_command()
    print(f"  –ö–æ–º–∞–Ω–¥–∞: {cmd}")
    expected_fts_cont = "python main.py services start --services fts --fts-interval 120"
    if cmd == expected_fts_cont:
        print(f"  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print(f"  ‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_fts_cont}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Railway
    print("\n" + "="*80)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø RAILWAY")
    print("="*80)

    print("\nüìù –î–ª—è –Ω–æ–≤–æ–≥–æ FTS —Å–µ—Ä–≤–∏—Å–∞ (RSS FTS) —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:")
    print()
    print("  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    print("  SERVICE_MODE=fts-continuous")
    print("  RAILWAY_SERVICE_ID=ffe65f79-4dc5-4757-b772-5a99c7ea624f")
    print("  FTS_BATCH=100000")
    print("  FTS_CONTINUOUS_INTERVAL=60")
    print()
    print("  –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞:")
    print("  python launcher.py")
    print()
    print("  –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("  ‚Üí python main.py services start --services fts --fts-interval 60")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    print("\n" + "="*80)
    print("–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –í–°–ï–• RAILWAY –°–ï–†–í–ò–°–û–í")
    print("="*80)

    services_config = [
        ("RSS POLL", "poll", "POLL_WORKERS=10, POLL_BATCH=10"),
        ("WORK", "work-continuous", "WORK_CONTINUOUS_INTERVAL=30, WORK_CONTINUOUS_BATCH=50"),
        ("OpenAIEmbending", "embedding", "EMBEDDING_BATCH=1000"),
        ("CHUNK", "chunk-continuous", "CHUNK_CONTINUOUS_INTERVAL=30, CHUNK_CONTINUOUS_BATCH=100"),
        ("RSS FTS", "fts-continuous", "FTS_BATCH=100000, FTS_CONTINUOUS_INTERVAL=60"),
        ("Bot", "bot", ""),
        ("rssnews", "openai-migration", "MIGRATION_INTERVAL=60, MIGRATION_BATCH=100"),
    ]

    print()
    print(f"{'–°–µ—Ä–≤–∏—Å':<20} {'SERVICE_MODE':<20} {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ':<50}")
    print("-"*80)

    for service, mode, vars in services_config:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç
        mode_works = any(r[0] == mode and r[1] for r in results)
        status = "‚úÖ" if mode_works else "‚ùå"
        print(f"{status} {service:<18} {mode:<20} {vars:<50}")

    print("\n" + "="*80)
    print("–ò–¢–û–ì")
    print("="*80)

    total_modes = len([r for r in results if r[0] != "invalid-mode"])
    working_modes = len([r for r in results if r[0] != "invalid-mode" and r[1]])

    print(f"\n‚úÖ –†–∞–±–æ—á–∏—Ö —Ä–µ–∂–∏–º–æ–≤: {working_modes}/{total_modes}")

    if working_modes == total_modes:
        print("üéâ –í—Å–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüìå launcher.py –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway")
        return 0
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏")
        return 1

if __name__ == "__main__":
    sys.exit(main())

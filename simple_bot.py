#!/usr/bin/env python3
"""
Simple Working Bot - Minimal polling bot for testing
"""

import os
import sys
import asyncio
import logging
import httpx
import json
from datetime import datetime

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('simple_bot.log')
    ]
)
logger = logging.getLogger(__name__)

class SimpleTelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.offset = 0
        self.running = False

    async def get_me(self):
        """Test bot connection"""
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{self.api_url}/getMe")

            if response.status_code == 200:
                return response.json()['result']
            else:
                logger.error(f"getMe failed: {response.status_code}")
                return None

        except Exception as e:
            logger.error(f"getMe error: {e}")
            return None

    async def send_message(self, chat_id: int, text: str):
        """Send message to chat"""
        try:
            async with httpx.AsyncClient(timeout=15) as client:
                response = await client.post(
                    f"{self.api_url}/sendMessage",
                    json={
                        'chat_id': chat_id,
                        'text': text,
                        'parse_mode': 'HTML'
                    }
                )

            if response.status_code == 200:
                logger.info(f"‚úÖ Message sent to {chat_id}")
                return True
            else:
                logger.error(f"‚ùå Send failed: {response.status_code} - {response.text}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Send error: {e}")
            return False

    async def get_updates(self):
        """Get updates from Telegram"""
        try:
            params = {
                'offset': self.offset,
                'limit': 10,
                'timeout': 30
            }

            async with httpx.AsyncClient(timeout=35) as client:
                response = await client.get(f"{self.api_url}/getUpdates", params=params)

            if response.status_code == 200:
                data = response.json()
                if data['ok']:
                    return data['result']
                else:
                    logger.error(f"API error: {data}")
                    return []
            else:
                logger.error(f"HTTP error: {response.status_code}")
                return []

        except Exception as e:
            logger.error(f"Get updates error: {e}")
            return []

    async def handle_message(self, message):
        """Handle incoming message"""
        chat_id = message['chat']['id']
        user_name = message['from'].get('first_name', 'User')
        text = message.get('text', '')

        logger.info(f"üì® Message from {user_name}: '{text}'")

        # Simple responses
        if text.startswith('/start'):
            response = f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ä–∞–±–æ—Ç–∞—é!\\n\\nüìã –ö–æ–º–∞–Ω–¥—ã:\\n/help - –ø–æ–º–æ—â—å\\n/time - –≤—Ä–µ–º—è\\n/echo [—Ç–µ–∫—Å—Ç] - –ø–æ–≤—Ç–æ—Ä"

        elif text.startswith('/help'):
            response = """üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

üîç <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /time - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
‚Ä¢ /echo [—Ç–µ–∫—Å—Ç] - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

‚ú® <b>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>"""

        elif text.startswith('/time'):
            response = f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"

        elif text.startswith('/echo '):
            echo_text = text[6:]  # Remove "/echo "
            response = f"üîÑ –ü–æ–≤—Ç–æ—Ä—è—é: {echo_text}"

        elif text.startswith('/status'):
            response = f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\\nüïê {datetime.now().strftime('%H:%M:%S')}\\nüë§ –û—Ç–≤–µ—á–∞—é {user_name}"

        else:
            # Echo any other message
            response = f"üëã {user_name}, —Ç—ã –Ω–∞–ø–∏—Å–∞–ª: \"{text}\"\\n\\nüí° –ü–æ–ø—Ä–æ–±—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"

        # Send response
        await self.send_message(chat_id, response)

    async def run(self):
        """Main bot loop"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞...")

        # Test connection
        bot_info = await self.get_me()
        if not bot_info:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É")
            return

        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info['username']}")
        logger.info(f"üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ @{bot_info['username']}")

        self.running = True
        message_count = 0

        while self.running:
            try:
                updates = await self.get_updates()

                for update in updates:
                    # Update offset
                    self.offset = update['update_id'] + 1

                    if 'message' in update:
                        message_count += 1
                        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è #{message_count}")
                        await self.handle_message(update['message'])

                if not updates:
                    # No updates, small delay
                    await asyncio.sleep(1)

            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)

        self.running = False
        logger.info(f"üèÅ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")

def main():
    # Check environment
    token = os.getenv('TELEGRAM_BOT_TOKEN')

    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN (Railway env)")
        return 1

    print("ü§ñ –ü–†–û–°–¢–û–ô –¢–ï–°–¢–û–í–´–ô –ë–û–¢")
    print("=" * 40)
    print(f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if token else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print("üí¨ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞!")
    print("‚èπÔ∏è  Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print()

    # Run bot
    bot = SimpleTelegramBot(token)

    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0

if __name__ == "__main__":
    main()

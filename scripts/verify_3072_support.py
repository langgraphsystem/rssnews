#!/usr/bin/env python3
"""Verify that 3072-dim vectors work correctly on Railway"""

import os
import sys
import json
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

from dotenv import load_dotenv
load_dotenv()

from pg_client_new import PgClient


def verify():
    client = PgClient()

    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 3072-dim –≤–µ–∫—Ç–æ—Ä–æ–≤ ===\n")

    with client._cursor() as cur:
        # 1. –ò—Å—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        print("1. –ò—Å—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (TEXT/JSON):")
        cur.execute('SELECT embedding FROM article_chunks WHERE embedding IS NOT NULL LIMIT 1')
        row = cur.fetchone()
        if row:
            emb = json.loads(row[0]) if isinstance(row[0], str) else row[0]
            print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(emb)}")
            print(f"   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {emb[:5]}")

        # 2. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
        print("\n2. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ pgvector:")
        cur.execute('SELECT embedding_vector FROM article_chunks WHERE embedding_vector IS NOT NULL LIMIT 1')
        row = cur.fetchone()
        if row:
            vec_str = str(row[0])
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "[0.1,0.2,...]"
            if vec_str.startswith('['):
                vec_list = vec_str.strip('[]').split(',')
                print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(vec_list)}")
                print(f"   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {vec_list[:5]}")
            else:
                print(f"   –§–æ—Ä–º–∞—Ç: {vec_str[:100]}...")

        # 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        print("\n3. –°—Ö–µ–º–∞ –∫–æ–ª–æ–Ω–∫–∏:")
        cur.execute("""
            SELECT
                pg_typeof(embedding_vector)::text,
                atttypmod - 4 as dimension
            FROM article_chunks, pg_attribute
            WHERE attrelid = 'article_chunks'::regclass
            AND attname = 'embedding_vector'
            AND embedding_vector IS NOT NULL
            LIMIT 1
        """)
        row = cur.fetchone()
        if row:
            type_name, dimension = row
            print(f"   –¢–∏–ø: {type_name}")
            print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å (typmod): {dimension}")

        # 4. –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ 3072-dim
        print("\n4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è 3072-dim –≤–µ–∫—Ç–æ—Ä–∞:")
        test_vec_3072 = '[' + ','.join(['0.1'] * 3072) + ']'
        try:
            cur.execute('SELECT %s::vector(3072) AS test_vec', (test_vec_3072,))
            result = cur.fetchone()[0]
            result_list = str(result).strip('[]').split(',')
            print(f"   ‚úÖ SUCCESS: –°–æ–∑–¥–∞–Ω –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ {len(result_list)}")
        except Exception as e:
            print(f"   ‚ùå FAILED: {e}")

        # 5. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        print("\n5. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å 3072-dim:")
        try:
            cur.execute("""
                SELECT COUNT(*)
                FROM article_chunks
                WHERE embedding_vector <=> %s::vector(3072) < 1.0
            """, (test_vec_3072,))
            count = cur.fetchone()[0]
            print(f"   ‚úÖ SUCCESS: –ù–∞–π–¥–µ–Ω–æ {count} –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤")
        except Exception as e:
            print(f"   ‚ùå FAILED: {e}")

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\n6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:")
        # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        cur.execute('SELECT COUNT(*) FROM article_chunks WHERE embedding_vector IS NOT NULL')
        migrated = cur.fetchone()[0]

        cur.execute('SELECT COUNT(*) FROM article_chunks WHERE embedding IS NOT NULL')
        total = cur.fetchone()[0]

        vector_size_bytes = 3072 * 4  # float32
        migrated_mb = (migrated * vector_size_bytes) / (1024**2)
        total_mb = (total * vector_size_bytes) / (1024**2)

        print(f"   –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated:,} –≤–µ–∫—Ç–æ—Ä–æ–≤")
        print(f"   –ó–∞–Ω–∏–º–∞—é—Ç: ~{migrated_mb:.1f} MB")
        print(f"   –í—Å–µ–≥–æ –±—É–¥–µ—Ç: ~{total_mb:.1f} MB ({total_mb/1024:.2f} GB)")

        # –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢
        print("\n" + "="*50)
        print("–ò–¢–û–ì–û:")
        print("="*50)

        if len(emb) == 3072:
            print("‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: 3072 dimensions")
        else:
            print(f"‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: {len(emb)} dimensions (–æ–∂–∏–¥–∞–ª–æ—Å—å 3072)")

        print(f"‚úÖ pgvector –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: 3072 dimensions")
        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ Railway Pro –ø–ª–∞–Ω (8 GB) –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è {total_mb/1024:.2f} GB")
        print(f"\nüéØ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ! –ú–∏–≥—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è.")


if __name__ == '__main__':
    verify()
